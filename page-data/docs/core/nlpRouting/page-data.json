{"componentChunkName":"component---node-modules-smooth-doc-src-templates-doc-js","path":"/docs/core/nlpRouting/","result":{"data":{"mdx":{"fields":{"pageType":"doc","title":"Intents, entities and fallbacks","editLink":""},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Intents, entities and fallbacks\",\n  \"section\": \"UNDERSTANDING THE CORE\",\n  \"order\": 8\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"routing-with-nlp-intents-entities-and-fallbacks\"\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#routing-with-nlp-intents-entities-and-fallbacks\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Routing with NLP: intents, entities and fallbacks\"), mdx(\"h2\", {\n    \"id\": \"introduction\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#introduction\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Introduction\"), mdx(\"p\", null, \"State of the art NLP services detects following structures\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"intents\"), \" - what user wants to do (verb)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"entities\"), \" - what's an object of intent (noun)\")), mdx(\"p\", null, \"Let's have an example: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"I want a ticket to Berlin\"), \".\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Berlin\"), \" is possibly \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"an entity\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"need-ticket\"), \" could be \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"an intent\"))), mdx(\"h2\", {\n    \"id\": \"basic-concept\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#basic-concept\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Basic concept\"), mdx(\"p\", null, \"How to match the previous exaple?\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"const { Router, ai } = require('wingbot');\\nconst bot = new Router();\\n\\nbot.use(ai.match(['need-ticket', '@town']), (req, res) => {\\n    res.text('Matched!');\\n});\\n\")), mdx(\"p\", null, \"The logic behind the evaluation is simple. If \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"one of intents\"), \" are matching and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"all entities\"), \" are detected, the\\ninteraction will be executed.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(intent OR intent OR ...) AND entity AND entity\")), mdx(\"h2\", {\n    \"id\": \"defining-entities\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#defining-entities\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Defining entities\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Required entity\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"const { Router, ai } = require('wingbot');\\nconst bot = new Router();\\nbot.use(ai.match('@town'), (req, res) => {\\n    res.text('Matched!');\\n});\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Optional entity\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"const { Router, ai } = require('wingbot');\\nconst bot = new Router();\\nbot.use(ai.match([{ entity: 'town', optional: true }]), (req, res) => {\\n    res.text('Matched!');\\n});\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Entity value\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"const { Router, ai } = require('wingbot');\\nconst bot = new Router();\\n\\n// using string expression\\nbot.use(ai.match('@town=Prague'), (req, res) => {\\n    res.text('Matched!');\\n});\\n\\n// using object\\nbot.use(ai.match([{ entity: 'town', compare: 'Prague' }]), (req, res) => {\\n    res.text('Matched!');\\n});\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Numeric range\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Number should be equal to 200 or less.\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"const { Router, ai } = require('wingbot');\\nconst bot = new Router();\\nbot.use(ai.match([\\n    { entity: 'amount', op: 'range ', compare: [null, 200] }\\n  ]), (req, res) => {\\n    res.text('Matched!');\\n});\\n\")))), mdx(\"h2\", {\n    \"id\": \"detecting-entities-using-expressions\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#detecting-entities-using-expressions\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Detecting entities using expressions\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Entity is present: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"@town\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Entity is optional: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"@town?\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Entity is present and value matches: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"@town=Prague\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Entity is present and value does not match: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"@town!=Prague\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Entity is present and value is greater than: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"@number>10\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Entity is present and value is greater or equal to: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"@number>=10\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Entity is present and value is less than: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"@number<10\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Entity is present and value is less or equal to: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"@number<=10\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Entity is present and value is within range: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"@number<>10,20\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Entity is present and value matches one of: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"@town=Prague,Berlin\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Entity is present and value does not match one of: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"@town!=Prague,Berlin\"))), mdx(\"h2\", {\n    \"id\": \"context-of-intent-detection\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#context-of-intent-detection\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Context of intent detection\"), mdx(\"p\", null, \"Context is usefull for routing text messages to the right interaction. In general, the context is defined by There are three types of context:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Global:\"), \" intent is detected globally, so it user can \\\"switch\\\" the context, when global intent is detected.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Dialogue (local):\"), \" the context is limited to current dialogue (Router)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Interaction:\"), \" With \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"res.expected('target')\"), \" you can strictly set a target interaction. So the following text response will be processed by the target interaction.\")), mdx(\"h2\", {\n    \"id\": \"global-intents-and-fallbacks\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#global-intents-and-fallbacks\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Global intents and fallbacks\"), mdx(\"p\", null, \"When using the global intent, the following interaction is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"always triggered\"), \" (except an expected interaction is set). This is, how the global intent is defined.\"), mdx(\"p\", null, \"The \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"global fallback\"), \" works as a default interaction. When no interaction is matched, bot replies with the global fallback. It should be defined in a root router.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"const { Router, ai } = require('wingbot');\\n\\n/**\\n * CONVERSATION ABOUT TICKETS\\n */\\nconst tickets = new Router();\\n\\n// array works as OR - either intent or postback triggers the interaction\\ntickets.use(['need', ai.globalMatch('need-ticket')], (req, res) => {\\n    res.text('So you want a ticket!')\\n});\\n\\nconst bot = new Router();\\n\\nbot.use('tickets', tickets);\\n\\n// global fallback\\nbot.use((req, res) => {\\n    res.text('Ok, do you want beverages or tickes?', {\\n        'tickets/need': 'Tickets',\\n        'beverages/coffee': 'Coffee',\\n        'beverages/tee': 'Tee'\\n    })\\n});\\n\")), mdx(\"p\", null, \"So the only reasonable use case for global intent is to make an interaction from a nested router globally avaialble (can be triggered from any other dialogue/Router)\"), mdx(\"h2\", {\n    \"id\": \"local-intents-and-fallbacks-dialogue-context\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#local-intents-and-fallbacks-dialogue-context\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Local intents and fallbacks (dialogue context)\"), mdx(\"p\", null, \"The local intent can be triggered only, when the last interaction the user visits is in the same dialogue (Router) as the local intent is defined.\"), mdx(\"p\", null, \"Also, the local fallback is triggered the same way. It's usefull when you want to take the user back to current dialogue.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"const { Router, ai } = require('wingbot');\\n\\nconst tickets = new Router();\\n\\ntickets.use(['need', ai.globalMatch('need-ticket')], (req, res) => {\\n    res.text('So you want a ticket!')\\n});\\n\\n// the local intent\\ntickets.use(['cost', ai.localMatch('how-much')], (req, res) => {\\n    res.text('But I need to know, where you want to go first. So where?');\\n});\\n\\n// local fallback\\nbeverages.use((req, res, postBack) => {\\n    res.text('No, this is about the ticket. Let\\\\'s try it again.');\\n    // redirect to the \\\"need\\\" interaction\\n    postBack('need');\\n});\\n\\n/**\\n * LET'S PUT IT TOGETHER\\n */\\nconst bot = new Router();\\n\\nbot.use('tickets', tickets);\\n\\n// global fallback\\nbot.use((req, res) => {\\n    res.text('Ok, do you want beverages or tickes?', {\\n        'tickets/need': 'Tickets',\\n        'beverages/coffee': 'Coffee',\\n        'beverages/tee': 'Tee'\\n    })\\n});\\n\")), mdx(\"p\", null, \"In this example, the bot responds to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"how-much\"), \" intent only when a previous interaction is one of those in the tickets router.\"), mdx(\"h2\", {\n    \"id\": \"processing-an-expected-response-interaction-context\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#processing-an-expected-response-interaction-context\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Processing an expected response (interaction context)\"), mdx(\"p\", null, \"To just process a response on a single interaction, there is a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"res.expected(<action>)\"), \" method. It defines, which interaction will be triggred, when the user responds with text. You can\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Process the a raw text (response fallback)\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"It's usefull when asking the user for an input. The text will be always processed with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"email-response\"), \" interaction.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"How to handle correct user responses, like: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"john.doe@gmail.com\"), \".\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"tickets.use('ask-for-email', (req, res) => {\\n  res.text('Will you give me your email?')\\n    .expected('email-response');\\n});\\n\\ntickets.use('email-response', (req, res) => {\\n  const email = req.text();\\n  res.text(`Ok, saving ${email} as your email.`)\\n    .setState({ email });\\n});\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Handling a specific intent\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"What if the user does not wont to give you an email? Let's detect a negative response.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"How to handle specifc user responses, like: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"no, not\"), \".\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"tickets.use('ask-for-email', (req, res) => {\\n  res.text('Will you give me your email?')\\n    .expected('email-response');\\n});\\n\\ntickets.use('email-response', ai.match('negative'), (req, res) => {\\n  res.text('It\\\\'s ok. I do not insist on having your email.');\\n});\\n\\ntickets.use('email-response', (req, res) => {\\n  const email = req.text();\\n  res.text(`Ok, saving ${email} as your email.`)\\n    .setState({ email });\\n});\\n\")))), mdx(\"h2\", {\n    \"id\": \"bookmarks-global-intents-under-control\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#bookmarks-global-intents-under-control\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Bookmarks: Global intents under control\"), mdx(\"p\", null, \"When using \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"an interaction context\"), \" - the expected interaction is specified, the global intents are not triggered, but \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"they're accessible under bookmarks\"), \". Let's follow up the previous example.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"tickets.use('ask-for-email', (req, res) => {\\n    res.text('Will you give me your email?')\\n        .expected('email-response');\\n});\\n\\n\\ntickets.use('email-response', async (req, res, postBack) => {\\n    // if there is a bookmark\\n    if (res.actionByAi()) {\\n        // respond with the bookmark\\n        await postBack(res.actionByAi(), {}, true);\\n\\n        // stop\\n        return Router.END;\\n    }\\n\\n    const email = req.text();\\n\\n    res.text(`Ok, saving ${email} as your email.`)\\n        .setState({ email });\\n});\\n\")), mdx(\"h2\", {\n    \"id\": \"system-entities\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#system-entities\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"System entities\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Simple RegExp entity\")), mdx(\"p\", null, \"Simple RegExp entities can be detected by registering an own entity detector.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"ai.getModel()\\n    .setEntityDetector('number', /[0-9]+/);\\n\")), mdx(\"p\", null, \"The value will be accessible between all detected entities in a NLP result.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"bot.use(ai.match('@number'), (req, res) => {\\n  const num = req.entity('number')\\n  // typeof num === 'string'\\n  res.text(`Found a number: ${number}`);\\n})\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Using an own value extractor\")), mdx(\"p\", null, \"RegExp detector returns the whole detected string as a value. To normalize the value, you can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"extractValue\"), \" option.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"ai.getModel()\\n    .setEntityDetector('number', /[0-9][0-9\\\\s]*/, {\\n      extractValue: (match) => parseInt(\\n        match[0].replace(/[^0-9]+/g, ''),\\n        10\\n      )\\n    });\\n\")), mdx(\"p\", null, \"Now the detector returns a numeric value.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Prevent sensitive data to leave your bot\")), mdx(\"p\", null, \"To keep a sensitive value inside a bot, you can mark your custom entity with an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"anonymize\"), \" flag.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"ai.getModel()\\n    .setEntityDetector('number', /[0-9][0-9\\\\s]*/, {\\n      extractValue: (match) => parseInt(\\n        match[0].replace(/[^0-9]+/g, ''),\\n        10\\n      ),\\n      anonymize: true\\n    });\\n\")), mdx(\"p\", null, \"When writing a sentence like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"My number is 123 456\"), \", a NLP will receive following text:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"my number is @NUMBER\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Using compound entities\")), mdx(\"p\", null, \"Just put an \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"uppercase name of the entitty starting with @\"), \" to your regexp.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"ai.getModel()\\n    .setEntityDetector('dollars', /\\\\$\\\\s?@NUMBER/);\\n\")), mdx(\"p\", null, \"When there is only one nested entity, the value will contain it's value. When there will be two or more entities, the value will be an object with a prop for every nested entity (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{entityName:123,...}\"), \").\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Keep in mind, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"the regular expression will always be executed as CASE INSENSITIVE\"), \";\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Using a custom entity detector\")), mdx(\"p\", null, \"Just put a function as an entity detector. You can also use \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"async function\"), \" as an entity detector.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"ai.getModel()\\n    .setEntityDetector('number', (text) => {\\n      const match = text.match(/[0-9]+/);\\n\\n      if (!match) {\\n        return null;\\n      }\\n\\n      return {\\n        text: match[0],\\n        value: parseInt(match[0], 10)\\n      };\\n    });\\n\")), mdx(\"p\", null, \"The return value has to contain \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"either detected\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"text\"), \" \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"or\"), \" \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"position of the string\"), \" (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"start\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"end\"), \").\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#routing-with-nlp-intents-entities-and-fallbacks","title":"Routing with NLP: intents, entities and fallbacks","items":[{"url":"#introduction","title":"Introduction"},{"url":"#basic-concept","title":"Basic concept"},{"url":"#defining-entities","title":"Defining entities"},{"url":"#detecting-entities-using-expressions","title":"Detecting entities using expressions"},{"url":"#context-of-intent-detection","title":"Context of intent detection"},{"url":"#global-intents-and-fallbacks","title":"Global intents and fallbacks"},{"url":"#local-intents-and-fallbacks-dialogue-context","title":"Local intents and fallbacks (dialogue context)"},{"url":"#processing-an-expected-response-interaction-context","title":"Processing an expected response (interaction context)"},{"url":"#bookmarks-global-intents-under-control","title":"Bookmarks: Global intents under control"},{"url":"#system-entities","title":"System entities"}]}]}}},"pageContext":{"id":"250819a7-add7-500a-bfdf-f8b9891853e1"}},"staticQueryHashes":["1122327541","1339625561","148928582","2140385554","3442269102","4275725850"]}