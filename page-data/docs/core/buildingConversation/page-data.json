{"componentChunkName":"component---node-modules-smooth-doc-src-templates-doc-js","path":"/docs/core/buildingConversation/","result":{"data":{"mdx":{"fields":{"pageType":"doc","title":"Building a Bot programmatically","editLink":""},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Building a Bot programmatically\",\n  \"section\": \"UNDERSTANDING THE CORE\",\n  \"order\": 2\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"building-a-conversation\"\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#building-a-conversation\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Building a Conversation\"), mdx(\"h2\", {\n    \"id\": \"echo-reacting-to-text-messages\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#echo-reacting-to-text-messages\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Echo: Reacting to text messages\"), mdx(\"p\", null, \"Let's start with simple example. This is how to make an echo.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"const { Router } = require('wingbot');\\nconst bot = new Router();\\n\\n// this route processes all incomming messages\\nbot.use((req, res) => {\\n    res.text('I\\\\'ve got this message:')\\n        .text(req.text());\\n});\\n\\nmodule.exports = bot;\\n\")), mdx(\"p\", null, \"This works like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"*-----------------------------------*\\n|                            Hello! |\\n| I've got this message:            |\\n| Hello!                            |\\n|                                   |\\n|              It smells like updog |\\n| I've got this message:            |\\n| It smells like updog              |\\n*-----------------------------------*\\n\")), mdx(\"h2\", {\n    \"id\": \"asking-a-question\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#asking-a-question\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Asking a question\"), mdx(\"p\", null, \"When asking user a question, it's important to keeping reply in context. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"res.expected(<path>)\"), \" method ensures, that response will be dispatched by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/whichCat\"), \" route.\"), mdx(\"p\", null, \"Routes shoud always begin with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/\"), \" slash, but when referencing route, starting slash is treated as absolute path reference. When you omit the starting slash, path is treated as relative.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"const { Router } = require('wingbot');\\nconst bot = new Router();\\n\\nbot.use('/whichCat', (req, res, postBack) => {\\n    const lowercaseText = req.text(true); // converts \\\"N\\xFDan. C\\xE1t\\\" to \\\"nyan-cat\\\"\\n\\n    if (lowercaseText.match(/nyan-cat/)) {\\n        res.text('Yeah, nyan cat!');\\n    } else if (lowercaseText.match(/grumpy-cat/)) {\\n        res.text('Ugh, grumpy cat!');\\n    } else {\\n        return Router.CONTINUE;\\n    }\\n});\\n\\nbot.use((req, res) => {\\n    res.text('So, Nyan cat or grumpy cat?')\\n        .expected('whichCat'); // set the route, which will process next text request\\n});\\n\\nmodule.exports = bot;\\n\")), mdx(\"p\", null, \"This works like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"*-----------------------------------*\\n|                          Nyan cat |\\n| So, Nyan cat or grumpy cat?       |\\n|                                   |\\n|                          Nyan cat |\\n| Yeah, nyan cat!                   |\\n|                                   |\\n|                             What? |\\n| So, Nyan cat or grumpy cat?       |\\n*-----------------------------------*\\n\")), mdx(\"h2\", {\n    \"id\": \"using-quick-replies-for-controlling-conversation\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#using-quick-replies-for-controlling-conversation\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Using Quick Replies for controlling conversation\"), mdx(\"p\", null, \"Click is always simplier then writing a text. And also working with events is much easier then text processing.\\nLet's lead conversation throuch quick replies.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"const { Router } = require('wingbot');\\nconst bot = new Router();\\n\\nbot.use('/grumpy', (req, res) => {\\n    res.text('Ugh, grumpy cat!');\\n});\\n\\nbot.use('/nyan', (req, res) => {\\n    res.text('Yeah, nyan cat!');\\n});\\n\\nbot.use((req, res) => {\\n    // let's give two options to user\\n    res.text('So, Nyan cat or grumpy cat?', {\\n        grumpy: 'Grumpy cat',\\n        nyan: 'Nyan cat'\\n    });\\n});\\n\\nmodule.exports = bot;\\n\")), mdx(\"p\", null, \"This code works \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"exacly like previous example\"), \", because when quick replies are used, treir text representation\\nis used to match the users input. String \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"Nyan cat\\\"\"), \" is converted to regular expression \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/nyan-cat/\"), \";\"), mdx(\"h2\", {\n    \"id\": \"post-back-is-also-an-action\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#post-back-is-also-an-action\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Post Back is also an action!\"), mdx(\"p\", null, \"We've normalized all Quick Replies, Post Backs, or Referrals to actions! You don't have to care about action type.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"const { Router } = require('wingbot');\\nconst bot = new Router();\\n\\nbot.use('/grumpy', (req, res) => {\\n    res.text('Ugh, grumpy cat!');\\n});\\n\\nbot.use('/nyan', (req, res) => {\\n    res.text('Yeah, nyan cat!');\\n});\\n\\nbot.use((req, res) => {\\n    // allow access grumpy cat with button\\n    res.button('Lets choose grumpy cat')\\n        .postBackButton('Call it', 'grumpy')\\n        .send();\\n\\n    // and nyan cat with quick reply\\n    res.text('So, Nyan cat or grumpy cat?', {\\n        nyan: 'Nyan cat'\\n    });\\n});\\n\\nmodule.exports = bot;\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#building-a-conversation","title":"Building a Conversation","items":[{"url":"#echo-reacting-to-text-messages","title":"Echo: Reacting to text messages"},{"url":"#asking-a-question","title":"Asking a question"},{"url":"#using-quick-replies-for-controlling-conversation","title":"Using Quick Replies for controlling conversation"},{"url":"#post-back-is-also-an-action","title":"Post Back is also an action!"}]}]}}},"pageContext":{"id":"91c60135-6be1-5d45-8c8d-e6e293219b7e"}},"staticQueryHashes":["1022386572","1122327541","1339625561","2140385554","3442269102","3597609067"]}