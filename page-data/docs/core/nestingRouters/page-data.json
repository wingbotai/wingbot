{"componentChunkName":"component---node-modules-smooth-doc-src-templates-doc-js","path":"/docs/core/nestingRouters/","result":{"data":{"mdx":{"fields":{"pageType":"doc","title":"Nesting - Reusable Blocks","editLink":""},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Nesting - Reusable Blocks\",\n  \"section\": \"UNDERSTANDING THE CORE\",\n  \"order\": 6\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"nested-routers---creating-conversation-blocks\"\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#nested-routers---creating-conversation-blocks\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Nested Routers - Creating conversation blocks\"), mdx(\"p\", null, \"Developing large chatbots with many flows requires advanced code organization.\\nWe came up with solution which allows:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"creating reusable conversation blocks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"composability of whole flows\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"keeping code clear and maintainable\")), mdx(\"h2\", {\n    \"id\": \"basic-concept\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#basic-concept\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Basic concept\"), mdx(\"p\", null, \"Each conversation block has a single entry point and one or more exit points.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"  start\\n    |\\n  |-O------------|\\n  |              |\\n  | conversation |      is represented by single\\n  |     block    |      <Router> instance\\n  |              |\\n  |-X---X---X----|\\n    |   |   |\\n\\n    exit points\\n\")), mdx(\"p\", null, \"When attaching the block into application, each exit point \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"must be \\\"connected\\\"\"), \" into\\na parent conversation block.\"), mdx(\"h2\", {\n    \"id\": \"example\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#example\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Example\"), mdx(\"p\", null, \"First, let's start with a module. There is a single entry point: (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"'/'\"), \") and\\ntwo exit points (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"'setName'\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"'leave'\"), \"). It's recomended to return data instead of\\nsetting them to state.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"// setName.js\\nconst { Router } = require('wingbot');\\n\\nconst bot = new Router();\\n\\n// entry point\\nbot.use('/', (req, res) => {\\n    res.text('Please, give me a full name :)')\\n        .expected('name');\\n});\\n\\nbot.use('name', (req, res, postBack) => {\\n    const name = req.text();\\n    if (!name || name.split(' ').length < 2) {\\n        res.text('Fullname must have two words or more.')\\n            .text('Please try it again', {\\n                '/start': 'Don\\\\'t want'\\n            });\\n        // just stop dispatching (equal to \\\"return undefined;\\\")\\n        return Router.END;\\n    }\\n\\n    res.setState({ name });\\n    postBack('/');\\n});\\n\\nmodule.exports = bot;\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"// index.js\\nconst { Router, Settings } = require('wingbot');\\nconst setName = require('./setName');\\n\\nconst settings = new Settings('pagetoken');\\nsettings.getStartedButton('/start');\\n\\nconst bot = new Router();\\n\\nbot.use('start', (req, res) => {\\n    if (req.state.name) {\\n        res.text(`Hello, I'am ${req.state.name}`, {\\n            setName: 'That\\\\'s bad name'\\n        });\\n    } else {\\n        res.text('Hello, please give me name!', {\\n            setName: 'Let\\\\'s do it'\\n        });\\n    }\\n});\\n\\nbot.use('setName', setName);\\n\\nmodule.exports = bot;\\n\")), mdx(\"p\", null, \"And this is, how the implementation works:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"*-----------------------------------*\\n|                       Get started |\\n| Hello, please give me name!       |\\n|                                   |\\n|                      Let\\\\'s do it |\\n| Please, give me a full name :)    |\\n|                                   |\\n|                                Ok |\\n| Fullname must have two words      |\\n| or more.                          |\\n| Please try it again               |\\n|                                   |\\n|                       Dorian Gray |\\n| Hello, I'am Dorian Gray           |\\n*-----------------------------------*\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#nested-routers---creating-conversation-blocks","title":"Nested Routers - Creating conversation blocks","items":[{"url":"#basic-concept","title":"Basic concept"},{"url":"#example","title":"Example"}]}]}}},"pageContext":{"id":"c3de5fcc-b134-53bd-ae23-0675dc72bf90"}},"staticQueryHashes":["1122327541","1339625561","148928582","2140385554","3442269102","4275725850"]}