{"componentChunkName":"component---node-modules-smooth-doc-src-templates-doc-js","path":"/docs/designer/analytics/","result":{"data":{"mdx":{"fields":{"pageType":"doc","title":"Analytics","editLink":""},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Analytics\",\n  \"section\": \"BUILDING A CHATBOT WITH DESIGNER\",\n  \"order\": 6\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"analyzing-the-bot\"\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#analyzing-the-bot\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Analyzing the Bot\"), mdx(\"h2\", {\n    \"id\": \"listening-to-action-event\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#listening-to-action-event\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Listening to action event\"), mdx(\"p\", null, \"to track chat events simply use\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"const { Router } = require('wingbot');\\nconst botRoot = new Router();\\n\\nbotRoot.on('action', (senderId, action, text, req, lastAction, doNotTrack, skill, res) => {\\n\\n    if (action) {\\n        // send info that `action` was passed\\n    }\\n\\n    if (req.isText()) {\\n        // was pure test\\n    }\\n\\n    // or use whole request event\\n    myMagicTracker(req.event);\\n});\\n\")), mdx(\"h2\", {\n    \"id\": \"logging-ai-success-rate\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#logging-ai-success-rate\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Logging AI success rate\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"aiHandled\"), \" property is set to true, when intent was matched (using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ai.match()\"), \" method or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ai.navigate()\"), \"). Otherwise it is set to false.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"You can set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"req.aiHandled\"), \" to true with method \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"req.markAsHandled()\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"const { Router, ai } = require('wingbot');\\nconst botRoot = new Router();\\n\\nbotRoot.use(ai.match('intent'), ...);\\n\\nbotRoot.on('action', (senderId, action, text, req, lastAction, doNotTrack, skill, res) => {\\n\\n    // logging winning intent\\n    if (req.intents && req.intents.length > 0) {\\n        const [{ intent, score, entities = [] }] = req.intents;\\n\\n\\n    }\\n});\\n\")), mdx(\"p\", null, \"When you need to collect AI feedback from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"navigator/makeSure\"), \" matchers use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ai.onConfirmMiddleware(<handler>)\"), \" middleware.\"), mdx(\"h2\", {\n    \"id\": \"tracking-disambiguation\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#tracking-disambiguation\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Tracking disambiguation\"), mdx(\"p\", null, \"It's good to track when disambbiguation occurs and if user selects the right meaning\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"const {\\n    Router,\\n    Processor,\\n    FLAG_DISAMBIGUATION_OFFERED,\\n    FLAG_DISAMBIGUATION_SELECTED\\n} = require('wingbot');\\nconst botRoot = new Router();\\n\\nbotRoot.on('action', (senderId, action, text, req, lastAction, doNotTrack, skill, res) => {\\n\\n    if (senderMeta.flag === FLAG_DISAMBIGUATION_OFFERED) {\\n        const { disambiguationIntents } = senderMeta;\\n        // when bot offers disambiguationIntents to let the user to choose\\n    }\\n});\\n\\nconst processor = new Processor(botRoot);\\n\\nbotRoot.on('action', (senderId, action, text, req, lastAction, doNotTrack, skill, senderMeta) => {\\n\\n    if (senderMeta.flag === FLAG_DISAMBIGUATION_SELECTED) {\\n        const { likelyIntent, disambText } = senderMeta;\\n        // when user means disambText is likelyIntent\\n    }\\n});\\n\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#analyzing-the-bot","title":"Analyzing the Bot","items":[{"url":"#listening-to-action-event","title":"Listening to action event"},{"url":"#logging-ai-success-rate","title":"Logging AI success rate"},{"url":"#tracking-disambiguation","title":"Tracking disambiguation"}]}]}}},"pageContext":{"id":"e89f579b-d626-5a2d-871f-dd36c63cb1a3"}},"staticQueryHashes":["1122327541","1339625561","148928582","2140385554","3442269102","4275725850"]}