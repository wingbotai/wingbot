{"componentChunkName":"component---node-modules-smooth-doc-src-templates-doc-js","path":"/docs/designer/scripting/","result":{"data":{"mdx":{"fields":{"pageType":"doc","title":"Scripting","editLink":""},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Scripting\",\n  \"section\": \"BUILDING A CHATBOT WITH DESIGNER\",\n  \"order\": 4\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"scripting-snippets-and-conditions\"\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#scripting-snippets-and-conditions\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"1em\",\n    width: \"1em\",\n    viewBox: \"0 0 16 16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Scripting: Snippets and conditions\"), mdx(\"p\", null, \"Easiest way to add custom behavior to your chatbot is to use \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"snippet directly in the wingbot.ai designer\"), \".\"), mdx(\"h2\", {\n    \"id\": \"snippet-concept\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#snippet-concept\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"1em\",\n    width: \"1em\",\n    viewBox: \"0 0 16 16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Snippet concept\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Snippet\"), \" is a function with following signature\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"(req, res, postBack) => {\\n\\n}\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"req\"), \" - the \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"../api/Request.md\"\n  }, \"Request\"), \" object\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"res\"), \" - the \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"../api/Responder.md\"\n  }, \"Responder\"), \" object\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"postBack\"), \" - function with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"(action: string[, data: Promise<Object>|Object])\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"makes a \\\"redirect\\\" to \\\"action\\\"\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"return value of \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"snippet\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"void\"), \" - returning nothing lets Router automatically proceed the rest of interaction\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Promise\"), \" - you can use an async function, which return a Promise\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Router.CONTINUE\"), \" - continues in a messaging event processing\", mdx(\"blockquote\", {\n    parentName: \"li\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"returning \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Router.CONTINUE\"), \" at the end of the interaction causes bot to continue to following interactions\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Router.END\"), \" - stops processing a messaging event\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"return value of \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"condition function\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"true\"), \" - yes, show the interaction\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"false\"), \" - no, skip the interaction\")))), mdx(\"h2\", {\n    \"id\": \"conversation-state-and-data\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#conversation-state-and-data\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"1em\",\n    width: \"1em\",\n    viewBox: \"0 0 16 16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Conversation state and data\"), mdx(\"p\", null, \"There is a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"conversation state\"), \" accessible with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"req.state\"), \", which is stored under senderId in StateStorage.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"req.state\"), \" - is the state as it was at the beginning of messaging event processing\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"res.setState(data)\"), \" - stores data into the state, after the event processing finishes\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"res.newState\"), \" - object, which is filled by \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"res.setState()\"), \" method during the messaging event processing\")), mdx(\"p\", null, \"And there are \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Responder data\"), \", which persists only during the messaging event processing. these are usefull especially for displaying data in responses.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Do not confuse \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Responder data\"), \" (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"res.data\"), \") with \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Request data\"), \" (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"req.event\"), \"), which contains transformed messaging event, or \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"action data\"), \" (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"req.actionData()\"), \") which contains additional action (postback, ref, e.t.c.) metadata\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"res.data\"), \" - temporary responder data, empty object at the beginning of messaging event processing\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"res.setData()\"), \" - stores data into the Responder data\")), mdx(\"h2\", {\n    \"id\": \"using-data-in-designer\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#using-data-in-designer\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"1em\",\n    width: \"1em\",\n    viewBox: \"0 0 16 16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Using data in designer\"), mdx(\"p\", null, \"All Let's have interaction like this. Wingbot uses a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Handlebars\"), \" templating engine, so we can use conditional expressions like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{{#if variable}}{{/if}}\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"You have visited this {{timesText}}{{#unless timesText}}{{visits}} times{{//unless}}.\\n\")), mdx(\"p\", null, \"How to bring it to life? Let's put this snippet before previous text:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"(req, res) => {\\n    const { visits = 1 } = req.state;\\n    res\\n        .setState({ visits: visits + 1 }) // store the new state\\n        .setData({ visits };\\n\\n    if (visits === 1) {\\n        res.setData({ timesText: 'for first time' });\\n    }\\n}\\n\")), mdx(\"p\", null, \"How the framework puts data into the template?\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"const templateData = Object.assign({}, req.state, res.newState, res.data, {\\n    _action: req.actionData()\\n});\\n\")), mdx(\"h2\", {\n    \"id\": \"loading-data-from-apis\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#loading-data-from-apis\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"1em\",\n    width: \"1em\",\n    viewBox: \"0 0 16 16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Loading data from APIs\"), mdx(\"p\", null, \"In the snippet (\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"not in the condition\"), \") is possible to make async actions. And its possible to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"request\"), \" npm library with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"request-promise-native\"), \" wrapper, which makes \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"request()\"), \" calls simplier, or you can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"axios\"), \". How to fetch data in snippet?\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Simple way\")), mdx(\"p\", null, \"The easiest way to fetch some data from an API is an asynchronus function.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"async (req, res) => {\\n    try {\\n        res.typingOn();\\n        const data = await request({\\n            url: 'https://random-data-api.com/api/stripe/random_stripe',\\n            json: true\\n        });\\n        res.setData({ data });\\n    } catch (err) {\\n        res.setData({ error: err.message });\\n    }\\n}\\n\")), mdx(\"p\", null, \"And then retrieve the data in a text message using the following handlebars template:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"{{#if error}}{{error}}{{else}}Found random card number: {{data.valid_card}}{{/if}}\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Non-blocking way for unusually long requests (>1s)\")), mdx(\"p\", null, \"Not blocking async actions are made through \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"two snippets in two interactions\"), \".\"), mdx(\"p\", null, \"First interaction: loading the data. Where to get right \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"action-name?\"), \" Its just a lowercase name of requested interaction. You can see it as \\\"alt\\\" text of the interaction title.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"(req, res, postBack) => {\\n    res.typingOn();\\n    postBack('second-interaction', async () => {\\n        try {\\n            // never send responses or save information to state here\\n            const data = await request('https://api.foobar.com/data');\\n            return { data };\\n        } catch (err) {\\n            return { err };\\n        }\\n    });\\n}\\n\")), mdx(\"p\", null, \"Second interaction: displaying the action result in text interaction\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"{{#if _action.err}}{{_action.err.message}}{{else}}{{_action.data.apiData}}{{/unless}}\\n\")), mdx(\"p\", null, \"or just process the data\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"(req, res) => {\\n    const { err, data } = req.actionData();\\n\\n    // do something with data\\n}\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"It's not good to block messaging event processing with async actions, when action takes more then \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"timeout\"), \" (Processor option), it can lead to overwriting state, when concurrent request arrives.\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#scripting-snippets-and-conditions","title":"Scripting: Snippets and conditions","items":[{"url":"#snippet-concept","title":"Snippet concept"},{"url":"#conversation-state-and-data","title":"Conversation state and data"},{"url":"#using-data-in-designer","title":"Using data in designer"},{"url":"#loading-data-from-apis","title":"Loading data from APIs"}]}]}}},"pageContext":{"id":"8a504bca-72a9-5f55-b6ee-000c99f01550"}},"staticQueryHashes":["1122327541","1339625561","148928582","2140385554","3442269102","4275725850"]}