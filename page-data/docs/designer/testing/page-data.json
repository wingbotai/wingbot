{
    "componentChunkName": "component---node-modules-smooth-doc-src-templates-doc-js",
    "path": "/docs/designer/testing/",
    "result": {"data":{"mdx":{"fields":{"pageType":"doc","title":"Testing","editLink":""},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Testing\",\n  \"section\": \"BUILDING A CHATBOT WITH DESIGNER\",\n  \"order\": 5\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"testing-the-bot\"\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#testing-the-bot\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Testing the Bot\"), mdx(\"h2\", {\n    \"id\": \"its-simple\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#its-simple\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"It's simple\"), mdx(\"p\", null, \"We made testing bots as simple as possible. Our testing tool provides methods\\nfor simulating\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"const { Tester } = require('wingbot');\\nconst assert = require('assert');\\nconst bot = require('../botRoot');\\n\\ndescribe('/bot', function () {\\n\\n    it('should work', async function () {\\n        const t = new Tester(bot);\\n\\n        await t.postBack('/start'); // send the postback\\n\\n        t.passedAction('start');   // check, that action passed\\n\\n        t.any()\\n            .contains('Hello')     // check the text response\\n            .quickReplyAction('continue');\\n\\n        await t.quickReply('continue'); // select the quick reply\\n\\n        t.passedAction('introduction');\\n\\n        await t.text('Show me the goods!');\\n\\n        t.any()\\n            .templateType('generic'); // look for generic template\\n\\n        // check the state\\n        assert.strictEqual(t.getState().seenGoods, true, 'seenGoods has to be true');\\n    });\\n\\n});\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#testing-the-bot","title":"Testing the Bot","items":[{"url":"#its-simple","title":"It's simple"}]}]}}},"pageContext":{"id":"c1128867-e799-5be3-8bbf-77ef3755ac75"}},
    "staticQueryHashes": ["1122327541","1339625561","148928582","2140385554","3442269102","4275725850"]}