scalar Any

type Tag {
    tag: String!,
    subscribtions: Int!
}

type Tags {
    data: [Tag]!
    lastKey: String
}

type Subscribtion {
    pageId: String
    senderId: String
    meta: String
}

type Subscribtions {
    data: [Subscribtion]!
    lastKey: String
    count: Int!
}

type Campaign {
    id: String!,
    name: String!

    action: String!
    data: String,

    include: [String]!
    exclude: [String]!
    pageId: String

    sliding: Boolean
    delay: Int
    slide: Int
    slideRound: Int
    active: Boolean!
    in24hourWindow: Boolean!
    startAt: Float
    allowRepeat: Boolean!
    type: String

    sent: Int!
    failed: Int!
    delivery: Int!
    read: Int!
    notSent: Int!
    leaved: Int!
    queued: Int!
    negative: Int!
    positive: Int!

    hasCondition: Boolean!
    condition: String
}

type Campaigns {
    data: [Campaign]!
    lastKey: String
}

input CampaignsCondition {
    active: Boolean
    sliding: Boolean
}

type Entity {
    entity: String!
    value: String!
    score: Float
}

type Intent {
    intent: String
    score: Float
    entities: [Entity!]
}

type AiMatch {
    path: String
    sort: Float
    intent: String
    score: Float
    entities: [Entity!]
}

type AiAction {
    aboveConfidence: Boolean!
    action: String!
    intent: Intent!
    sort: Float!
    winner: Boolean!
}

type ToolCall {
    id: String
    name: String
    args: String
}

type LLMMessage {
    role: String!
    content: String
    finishReason: String
    toolCallId: String
    toolCalls: [ToolCall!]
}

type PromptInfo {
    prompt: [LLMMessage!]!
    result: LLMMessage!
}

type UserInteraction {
    senderId: String!
    pageId: String!

    timestamp: Float!

    intent: String
    text: String
    entities: [Entity!]
    intents: [Intent!]
    action: String
    data: Any
    expected: String
    aiConfidence: Float
    aiMatch: AiMatch
    aiActions: [AiAction!]
    flag: String
    likelyIntent: String

    request: Any!
    responses: [Any]!
    visitedInteractions: [String]
    prompts: [PromptInfo!]

    err: String
}

type Subscription {
    tag: String!
    meta: Any
}

type Conversation {
    senderId: String!
    pageId: String!
    lastInteraction: String!
    name: String
    state: Any!
    subscribtions: [String]
    subscriptions: [Subscription!]
    history (
        limit: Int! = 10
        startTimestamp: Float
        endTimestamp: Float
    ): [UserInteraction]
}

input ConversationsCondition {
    search: String
}

type Conversations {
    data: [Conversation]!
    lastKey: String
}

type QueuingResult {
    queued: Int!
}

type PostBackResult {
    status: Int
}

type ValidationResult {
    ok: Boolean!
    error: String
}

type TestResult {
    output: String
    summaryOutput: String
    step: Int
    stepCount: Int
    passed: Int
    failed: Int
    skipped: Int
}

input CreateCampaignInput {
    name: String!
    action: String!
    data: String = "{}"

    include: [String]! = []
    exclude: [String]! = []
    pageId: String

    sliding: Boolean = false
    delay: Int
    slide: Int
    slideRound: Int
    active: Boolean! = false
    in24hourWindow: Boolean! = true
    startAt: Float
    allowRepeat: Boolean! = false
    type: String

    hasCondition: Boolean! = false
    condition: String
}

input SubscriptionData {
    pageId: String!
    senderId: String!
    tags: [String!]!
    remove: Boolean = false
    meta: Any
}

input UpdateCampaignInput {
    name: String
    action: String
    data: String

    include: [String]
    exclude: [String]
    pageId: String

    sliding: Boolean
    delay: Int
    slide: Int
    slideRound: Int
    active: Boolean
    in24hourWindow: Boolean
    startAt: Float
    allowRepeat: Boolean
    type: String

    hasCondition: Boolean
    condition: String
}

type Query {
    "list tags statistics"
    tags(pageId:String): Tags

    "fetch user ids for selected tag"
    subscribtions (
        include: [String!] = []
        exclude: [String!] = []
        pageId: String
        limit: Int = 100
        lastKey: String
    ): Subscribtions

    "get a campaign by ID"
    campaign (
        campaignId: String!
    ): Campaign

    "list of user defined campaigns"
    campaigns(
        limit: Int
        lastKey: String
        condition: CampaignsCondition
    ): Campaigns

    "list all known conversations"
    conversations(
        limit: Int
        lastKey: String
        condition: ConversationsCondition
    ): Conversations

    "list flagged interactions"
    flaggedInteractions(
        limit: Int! = 10
        startTimestamp: Float
        flag: String
    ): [UserInteraction!]

    "get a conversation by ID"
    conversation (
        pageId: String!
        senderId: String!
    ): Conversation

    "returns the API version"
    version: String!

    "export subscribtions from campaigns"
    unsuccessfulSubscribers(
        campaignId: String
        sentWithoutReaction: Boolean = false
        pageId: String
    ): Subscribtions

    "run conversation test"
    conversationTest(
        lang: String
        bot: Any
        step: Int
    ): TestResult
}

type Mutation {
    "validate conversation data"
    validateBot(
        bot:Any!,
        compressed: Boolean = false
    ): ValidationResult

    "invalidate a conversation cache in the chatbot"
    updateBot: Boolean

    "send a message to any user"
    postBack(pageId:String!,senderId:String!,action:String!,data:Any): PostBackResult

    "create a new campaign"
    createCampaign(campaign: CreateCampaignInput!): Campaign

    "update a campaign"
    updateCampaign(campaignId: String!, update: UpdateCampaignInput!): Campaign

    "remove a campaign"
    removeCampaign(campaignId: String!): Boolean

    "run a campaign"
    runCampaign(campaignId: String!): QueuingResult

    "subscribe users"
    subscribeUsers(pageId:String!, senderIds:[String!]!, tag: String): Boolean

    "subscribe with metadata"
    subscribeWithData (subscriptions: [SubscriptionData!]!): Boolean
}